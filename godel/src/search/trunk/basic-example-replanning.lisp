(in-package :shop2)

(defdomain logistics
					 ((:operator (!move ?t ?l1 ?l2)
											 ((truck-at ?t ?l1) (adjacent ?l1 ?l2))
											 ((truck-at ?t ?l1))
											 ((truck-at ?t ?l2)))

						(:operator (!pickup ?p ?t ?l)
											 ((package-at ?p ?l) (truck-at ?t ?l) (empty ?t))
											 ((package-at ?p ?l) (empty ?t))
											 ((on ?p ?t)))

						(:operator (!drop ?p ?t ?l)
											 ((truck-at ?t ?l) (on ?p ?t))
											 ((on ?p ?t))
											 ((package-at ?p ?l) (empty ?t)))

						(:gdr (move-package ?p ?t ?l ?l1 ?l2)
									((package-at ?p ?l))
									((available ?t) (truck-at ?t ?l2) (package-at ?p ?l1))
									((truck-at ?t ?l1) (on ?p ?t) (truck-at ?t ?l)))

						(:gdr (move-truck ?t ?l1 ?l2 ?l3)
									((truck-at ?t ?l2))
									((truck-at ?t ?l1) (adjacent ?l2 ?l3))
									((truck-at ?t ?l3)))


						;	   (:- (adjacent ?x ?y) ((adjacent ?y ?x)))
						))

;; (defobjects '(t1 t2 t3 l1 l2 l3 l4 l5 l6 l7 l8 p))

(defproblem PD-problem1 logistics
						((package p)
						 (truck t1)
						 (truck t2)
						 (truck t3)
						 (location l1)
						 (location l2)
						 (location l3)
						 (location l4)
						 (location l5)
						 (location l6)
						 (location l7)
						 (location l8)
						 (location l9)
						 (package-at p l3)
						 (truck-at t1 l4)
						 (truck-at t2 l1)
						 (truck-at t3 l8)
						 (adjacent l1 l2)
						 (adjacent l1 l3)
						 (adjacent l2 l3)
						 (adjacent l2 l4)
						 (adjacent l3 l5)
						 (adjacent l4 l5)
						 (adjacent l4 l6)
						 (adjacent l5 l7)
						 (available t1)
						 (available t2)
						 (available t3)
						 (adjacent l2 l1)
						 (adjacent l3 l1)
						 (adjacent l3 l2)
						 (adjacent l4 l2)
						 (adjacent l5 l3)
						 (adjacent l5 l4)
						 (adjacent l6 l4)
						 (adjacent l7 l5)
						 (adjacent l6 l8)
						 (adjacent l8 l6)
						 (empty t1)
						 (empty t3)
						 (empty t2))
						((package-at p l4)))
;						((truck-at t2 l8)))

