


///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// This class writes KQML tags and data into a socket
// Written specific to Goal-Transformation project
//
// Date: Apr-11-2000
//
// Author: Chaitresh Srinivas (CS Grad Student - WSU)
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////



import java.net.Socket;
import java.io.*;




public class toKQML{

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Global Variables of the Class
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    Socket socketObject;
    BufferedReader fromServer;
    PrintWriter toServer;



///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public toKQML(String HostName, int PortNumber){

        try{
            socketObject = new Socket(HostName,PortNumber);
            fromServer = new BufferedReader(new InputStreamReader(socketObject.getInputStream()));
            toServer = new PrintWriter(socketObject.getOutputStream(), true);

        } catch(SecurityException e){
            System.out.println("There was an Security Exception while creating the Socket");
            System.out.println("Caught at toKQML.java constructor");
            e.printStackTrace();
        } catch(IOException e){
            System.out.println("There was an I/O Exception while creating the Socket");
            System.out.println("Caught at toKQML.java constructor");
            e.printStackTrace();
        }

    }




///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Read anything from the other side
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public String Read(){
        String str = "";
        try{
            while(str.equals(""))
                while(fromServer.ready()){
                    str += fromServer.readLine();
                }
        } catch(Exception e){
            System.out.println("Error in reading");
            e.printStackTrace();
        }
        return(str);
    }


///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// sends a newline character to the server
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public void Newline(){

        toServer.println();
    }



///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Disconnects
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public void Quit(){
        toServer.println("quit");

        try{
            socketObject.close();
            fromServer.close();
            toServer.close();
        } catch(Exception e){
            e.printStackTrace();
        }

    }



///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Writes the insert tag
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public void Insert(){
        toServer.print("insert ");
    }


///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Writes open parenthesis
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public void OpenParen(){
        toServer.print("(");
    }


///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Writes close parenthesis
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public void CloseParen(){
        toServer.print(")");
    }


///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Writes "achieve" tag
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public void Achieve(){
        toServer.print("achieve ");
    }


///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Writes sender information
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public void Sender(String SenderName){
        toServer.print(":sender " + SenderName + " ");
    }

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Writes sender information
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public void Content(String ContentString){
        toServer.print(":content " + ContentString + " ");
    }



///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Writes the Name tag and the value associated with it
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public void Name(String NameValue){
        toServer.print(":name " + NameValue + " ");
    }



///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Writes the Ontology tag and the value associated with it
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public void Ontology(String OntologyValue){
        toServer.print(":ontology " + OntologyValue + " ");
    }


///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Writes the Data tag and the value associated with it
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public void Data(String DataValue){
        toServer.print(":data " + DataValue + " ");
    }


///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// Writes the Language tag and the value associated with it
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

    public void Language(String LanguageValue){
        toServer.print(":language " + LanguageValue + " ");
    }

}

