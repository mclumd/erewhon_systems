(defvar *load-wrapper-immediately* t
  "If t, then load binaries, else load source code.")


(defparameter *wrapper-home* 
    "/usr/local/mcox/Research/PRODIGY/Wrapper/"
    )

(defparameter *wrapper-modules*
  '(("/lisp-source/"  "tcl" "prod-specific" "ask-rules" "shell" 
     ;;"ipc" ;Clint Hyde replaced the need for this file. 
     "scrollbutton" "op-graph" "ui" 
     )
    ("/sockets/"  "c-interface" "socket-interface"
     )
   ))


(defparameter *wrapper-binary-pathname*
  (set-binary-path *wrapper-home*)
  )



(defun set-binary-path (&optional 
			(module-path
			 *system-directory*))
  (concatenate 'string 
	       module-path
	       #+APPLE "fasl:"
	       #+(and CMU IBM-RT-PC) ".ibm-rt/"
	       #+(and ALLEGRO SUN3 ALLEGRO-V3.1)  ".sun3-allegro-3.1/"
	       #+(and ALLEGRO DEC3100 ALLEGRO-V3.1) ".pmax-allegro/"
	       #+(and ALLEGRO DEC3100 ALLEGRO-V4.1) ".pmax-allegro-4.1/"
	       #+(and ALLEGRO SPARC ALLEGRO-V5.0) ".sparc-allegro-5.0/"
	       #+(and ALLEGRO SPARC ALLEGRO-V5.0.1) ".sparc-allegro-5.0.1/"
	       #+(and ALLEGRO SPARC ALLEGRO-V4.3.1) ".sparc-allegro-4.3.1/"
	       #+(and ALLEGRO SPARC ALLEGRO-V4.3) ".sparc-allegro-4.3/"
	       #+(and ALLEGRO SPARC ALLEGRO-V4.2) ".sparc-allegro-4.2/"
	       #+(and ALLEGRO SPARC ALLEGRO-V4.1) ".sparc-allegro-4.1/"	       
	       #+(and ALLEGRO SPARC ALLEGRO-V4.0) ".sparc-allegro-4.0/"
	       #+(and ALLEGRO SPARC ALLEGRO-V3.1) ".sparc-allegro-3.1/"
	       #+(and CMU PMAX) ".pmax-cmu/"
	       #+(and CMU SPARC) ".sparc-cmu/"
	       #+(and DOS CLISP) "dosbin/"
	       #+PA ".hp-9000/"
	       #+(and PRISM ALLEGRO-V4.2) ".hp-allegro-4.2/"
	       #+(and LUCID LCL4.0 MIPS) ".pmax-lucid-4.0/"
	       #+(and LUCID LCL4.0 SPARC) ".sparc-lucid-4.0/"
	       #+(and GCL SPARC) ".gnu/"
	       #+(AND GCL UNIX BSD386) ".gnu-linux/"
	       #+CLISP ".clisp/"
	       )
  )


;;; Added [17jun98 cox]
(defun load-ui-source ()
  (dolist (module *ui-modules*)
    (dolist (file (rest module))
      (load (concatenate 'string *prod-ui-home*  (first module) file))))
  )

(defun load-ui-binaries ()
  (dolist (module *ui-modules*)
    (dolist (file (rest module))
      (load (concatenate 'string *ui-binary-pathname*  file))))
  )



(defun ui-compile-all ()
  (dolist (each-mod *ui-modules*)
    (dolist (each-file (rest each-mod))
	    (p-compile 
	     (first each-mod)
	     each-file 
	     *prod-ui-home*
	     *ui-binary-pathname*)
	    ))
  )


;;;this is new, CRH. 10-2-97.
;(load (concatenate 'string *prod-ui-home* "/sockets/c-interface.lisp"))
;(load (concatenate 'string *prod-ui-home* "/sockets/socket-interface.lisp"))

;;;commented, for new socket code. CRH, 10-2-97.
;(load (concatenate 'string *prod-ui-home* "/ipc"))

;;; del 17jun98 (load (concatenate 'string *prod-ui-home* "/tcl"))

;;; Want this loaded up front for the partial order stuff to work
;;; smoothly
#|
(unless (find-package "PSGRAPH") (make-package "PSGRAPH"))
(load "/afs/cs/project/prodigy-aperez/order/access-fns-pro4.lisp")
(load "/afs/cs/project/prodigy-aperez/order/my-release-partial.lisp")
(load "/afs/cs/project/prodigy-aperez/order/process-preconds.lisp")
(load "/afs/cs/project/prodigy-jblythe/tcl-tk/footprint.lisp")
(load "/afs/cs/project/prodigy-aperez/codep4/psgraph.lisp")
(load "/afs/cs/project/prodigy-aperez/codep4/print-partial.lisp"))

(load (concatenate 'string 
		   (if *load-ui-immediately* *ui-binary-pathname* *prod-ui-home*) 
		   "/prod-specific" 
		   (if *load-ui-immediately* ".fasl" ".lisp")))
;;;Added to implement user control of planning decisions [19sep97 cox]
(load (concatenate 'string 
		   (if *load-ui-immediately* *ui-binary-pathname* *prod-ui-home*)
		   "/ask-rules"
		   (if *load-ui-immediately* ".fasl" ".lisp")))
;;; Added [15jun98 cox]
(load (concatenate 'string 
		   (if *load-ui-immediately* *ui-binary-pathname* *prod-ui-home*)
		   "/shell"
		   (if *load-ui-immediately* ".fasl" ".lisp")))
(load (concatenate 'string 
		   (if *load-ui-immediately* *ui-binary-pathname* *prod-ui-home*) 
		   "/scrollbutton"
		   (if *load-ui-immediately* ".fasl" ".lisp")))
(load (concatenate 'string 
		   (if *load-ui-immediately* *ui-binary-pathname* *prod-ui-home*) 
		   "/op-graph"
		   (if *load-ui-immediately* ".fasl" ".lisp")))


;;; Added [15jun98 cox]
(load (concatenate 'string 
		   (if *load-ui-immediately* *ui-binary-pathname* *prod-ui-home*) 
		   "/ui"
		   (if *load-ui-immediately* ".fasl" ".lisp")))

|#

;;; Placed here because I removed it from ask-rules.lisp. Wanted that file to
;;; be compiled, but this function cannot be compiled with the control
;;; rules. [17jun98 cox]
;;;
(defun enable-user-control (flag)
  "Turn on user guidance and load the control rules."
  (setf *user-guidance* flag)
  (when flag
	(control-rule ASK-FOR-GOAL
		      (if (and
			   (user-prefers-goal <goal>)))
		      (then prefer goal <goal> <g>))

	(control-rule ASK-FOR-OPERATOR
		      (if (and
			   (user-prefers-operator <operator>)))
		      (then prefer operator <operator> <ops>))

	(control-rule ASK-FOR-BINDINGS
		      (if (and 
			   (user-prefers-bindings <bindings>)))
		      (then prefer bindings <bindings> <bs>))
	))


(if *load-ui-immediately*
    (load-ui-binaries)
  (load-ui-source))
