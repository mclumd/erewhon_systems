(setf *load-verbose* t)
(problem 'bacchus)
(format t "~S" (run :depth-bound 1000 :output-level 1))
(problem 'half-suss)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p1) 
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p10)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p11)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p12)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p13)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p14)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p15)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p16)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p17)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p18)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p19)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p2)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p20)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p21)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p22)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p23)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p24)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p25)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p3)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p4)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p5)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p7)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p8)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'p9)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'paper)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'suss-p)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'suss)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'suss1)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'suss2)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'test)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'test1)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'test3)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 
(problem 'test4)
(format t "~S" (run :depth-bound 1000 :output-level 1)) 

