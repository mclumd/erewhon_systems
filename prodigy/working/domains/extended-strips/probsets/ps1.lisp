; 14 probs, max 3 blocks, max 2 goals

(setq *TEST-PROBS*

      '((setf (current-problem)
	 (create-problem
	  (name SS1-1)
	  (objects
	   (a b BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(dr-closed dr12)
		(locked dr12)
		(carriable A)
		(inroom B rm2)
		(inroom A rm1)
		(inroom key12 rm2)
		(inroom robot rm2)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (unlocked dr12))))

	(setf (current-problem)
	 (create-problem
	  (name SS1-2)
	  (objects
	   (a b c BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(unlocked dr12)
		(dr-closed dr12)
		(pushable B)
		(pushable A)
		(inroom C rm2)
		(inroom B rm1)
		(inroom A rm1)
		(inroom key12 rm2)
		(inroom robot rm2)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (dr-closed dr12) (inroom B rm2)))))

	(setf (current-problem)
	 (create-problem
	  (name SS1-3)
	  (objects
	   (a b c BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(dr-closed dr12)
		(locked dr12)
		(carriable B)
		(pushable A)
		(inroom C rm1)
		(inroom B rm2)
		(inroom A rm2)
		(inroom key12 rm2)
		(inroom robot rm2)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (unlocked dr12) (arm-empty)))))

	(setf (current-problem)
	 (create-problem
	  (name SS1-4)
	  (objects
	   (a b c BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(dr-closed dr12)
		(locked dr12)
		(pushable C)
		(carriable B)
		(inroom C rm1)
		(inroom B rm1)
		(inroom A rm2)
		(inroom key12 rm2)
		(inroom robot rm2)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (inroom C rm2) (inroom robot rm1)))))

	(setf (current-problem)
	 (create-problem
	  (name SS1-5)
	  (objects
	   (a b BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(next-to B A)
		(next-to A B)
		(dr-closed dr12)
		(locked dr12)
		(pushable A)
		(inroom B rm2)
		(inroom A rm2)
		(inroom key12 rm1)
		(inroom robot rm1)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (inroom robot rm2) (inroom A rm1)))))

	(setf (current-problem)
	 (create-problem
	  (name SS1-6)
	  (objects
	   (a b c BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(unlocked dr12)
		(dr-open dr12)
		(pushable C)
		(pushable A)
		(inroom C rm2)
		(inroom B rm1)
		(inroom A rm1)
		(inroom key12 rm1)
		(inroom robot rm1)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (next-to A C) (arm-empty)))))
		
	(setf (current-problem)
	 (create-problem
	  (name SS1-7)
	  (objects
	   (a b BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(unlocked dr12)
		(dr-closed dr12)
		(carriable A)
		(inroom B rm2)
		(inroom A rm2)
		(inroom key12 rm1)
		(inroom robot rm1)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (inroom key12 rm2) (arm-empty)))))

	(setf (current-problem)
	 (create-problem
	  (name SS1-8)
	  (objects
	   (a b BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(unlocked dr12)
		(dr-closed dr12)
		(carriable A)
		(inroom B rm2)
		(inroom A rm2)
		(inroom key12 rm1)
		(inroom robot rm1)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (inroom robot rm2) (inroom A rm2)))))

	(setf (current-problem)
	 (create-problem
	  (name SS1-9)
	  (objects
	   (a b c BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(dr-closed dr12)
		(locked dr12)
		(carriable C)
		(pushable A)
		(inroom C rm2)
		(inroom B rm2)
		(inroom A rm2)
		(inroom key12 rm2)
		(inroom robot rm2)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (next-to C A) (next-to A C)))))
	
	(setf (current-problem)
	 (create-problem
	  (name SS1-10)
	  (objects
	   (a b BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(unlocked dr12)
		(dr-open dr12)
		(pushable A)
		(inroom B rm1)
		(inroom A rm2)
		(inroom key12 rm1)
		(inroom robot rm2)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (inroom A rm1) (inroom robot rm1)))))
	
	(setf (current-problem)
	 (create-problem
	  (name SS1-11)
	  (objects
	   (a b BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(unlocked dr12)
		(dr-open dr12)
		(pushable B)
		(carriable A)
		(inroom B rm1)
		(inroom A rm2)
		(inroom key12 rm1)
		(inroom robot rm2)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (dr-open dr12) (inroom B rm2)))))
	
	
	(setf (current-problem)
	 (create-problem
	  (name SS1-12)
	  (objects
	   (a b BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(unlocked dr12)
		(dr-open dr12)
		(pushable B)
		(carriable A)
		(inroom B rm1)
		(inroom A rm2)
		(inroom key12 rm1)
		(inroom robot rm2)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (dr-closed dr12) (inroom key12 rm2)))))
	
	(setf (current-problem)
	 (create-problem
	  (name SS1-13)
	  (objects
	   (a b BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(unlocked dr12)
		(dr-open dr12)
		(pushable B)
		(carriable A)
		(inroom B rm1)
		(inroom A rm2)
		(inroom key12 rm1)
		(inroom robot rm2)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (dr-closed dr12) (inroom A rm1)))))
	
	(setf (current-problem)
	 (create-problem
	  (name SS1-15)
	  (objects
	   (a b BOX)
	   (dr12 DOOR)
	   (key12 KEY)
	   (rm1 rm2 ROOM))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(unlocked dr12)
		(dr-open dr12)
		(pushable B)
		(carriable A)
		(inroom B rm1)
		(inroom A rm2)
		(inroom key12 rm1)
		(inroom robot rm2)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (inroom robot rm1) (inroom B rm2)))))))

(setq *AUX-COMMANDS*
      '((SS1-12 (optimal-path (cadr *ALL-NODES*)))))
 
; doesnt come up ;    (SS1-13 (no-optimal-path (cadr ALL-NODES)))))
; 'N19

