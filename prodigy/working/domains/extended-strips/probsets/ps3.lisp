; seven probs, SW1, 2 goal, 4 objs

(setf *test-probs*
      '((setf (current-problem)
	 (create-problem
	  (name SS3-1)
	  (objects
	   (a b BOX)
	   (key12 KEY)
	   (rm1 rm2 ROOM)
	   (dr12 DOOR))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(next-to B A)
		(next-to A B)
		(unlocked dr12)
		(dr-open dr12)
		(pushable B)
		(carriable A)
		(inroom B rm1)
		(inroom A rm1)
		(inroom key12 rm2)
		(inroom robot rm1)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (dr-closed dr12) (inroom key12 rm1)))))
	
	
	(setf (current-problem)
	 (create-problem
	  (name SS3-2)
	  (objects
	   (a b c BOX)
	   (key12 KEY)
	   (rm1 rm2 ROOM)
	   (dr12 DOOR))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(dr-closed dr12)
		(locked dr12)
		(carriable C)
		(carriable A)
		(inroom C rm2)
		(inroom B rm1)
		(inroom A rm1)
		(inroom key12 rm2)
		(inroom robot rm2)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (inroom C rm1) (inroom A rm1)))))
	
	(setf (current-problem)
	 (create-problem
	  (name SS3-3)
	  (objects
	   (a b c d BOX)
	   (key12 KEY)
	   (rm1 rm2 ROOM)
	   (dr12 DOOR))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(unlocked dr12)
		(dr-closed dr12)
		(pushable D)
		(carriable B)
		(pushable A)
		(inroom D rm1)
		(inroom C rm2)
		(inroom B rm2)
		(inroom A rm2)
		(inroom key12 rm1)
		(inroom robot rm2)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (inroom key12 rm2) (inroom B rm2)))))
	
	(setf (current-problem)
	 (create-problem
	  (name SS3-4)
	  (objects
	   (a b c BOX)
	   (key12 KEY)
	   (rm1 rm2 ROOM)
	   (dr12 DOOR))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(next-to C A)
		(next-to A C)
		(dr-closed dr12)
		(locked dr12)
		(pushable C)
		(pushable A)
		(inroom C rm1)
		(inroom B rm1)
		(inroom A rm1)
		(inroom key12 rm1)
		(inroom robot rm1)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (unlocked dr12) (inroom C rm1)))))
	
	
	(setf (current-problem)
	 (create-problem
	  (name SS3-5)
	  (objects
	   (a b c d BOX)
	   (key12 KEY)
	   (rm1 rm2 ROOM)
	   (dr12 DOOR))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(next-to D A)
		(next-to A D)
		(unlocked dr12)
		(dr-closed dr12)
		(carriable C)
		(carriable A)
		(inroom D rm1)
		(inroom C rm2)
		(inroom B rm2)
		(inroom A rm1)
		(inroom key12 rm2)
		(inroom robot rm1)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (inroom robot rm2) (inroom C rm1)))))
	
	
	(setf (current-problem)
	 (create-problem
	  (name SS3-6)
	  (objects
	   (a b c BOX)
	   (key12 KEY)
	   (rm1 rm2 ROOM)
	   (dr12 DOOR))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(dr-closed dr12)
		(locked dr12)
		(carriable C)
		(carriable A)
		(carriable B)
		(inroom C rm1)
		(inroom B rm1)
		(inroom A rm1)
		(inroom key12 rm1)
		(inroom robot rm1)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (holding B) (next-to C A)))))
	
	(setf (current-problem)
	 (create-problem
	  (name SS3-6A)
	  (objects
	   (a b c BOX)
	   (key12 KEY)
	   (rm1 rm2 ROOM)
	   (dr12 DOOR))
	  (state
	   (and (arm-empty)
		(dr-to-rm dr12 rm2)
		(dr-to-rm dr12 rm1)
		(connects dr12 rm2 rm1)
		(connects dr12 rm1 rm2)
		(dr-closed dr12)
		(locked dr12)
		(carriable B)
		(carriable A)
		(inroom C rm1)
		(inroom B rm1)
		(inroom A rm1)
		(inroom key12 rm1)
		(inroom robot rm1)
		(carriable key12)
		(is-key dr12 key12)))
	  (goal (and (holding B)(unlocked dr12)))))))

(setq *AUX-COMMANDS*
      '((SS2-2 (optimal-path (cadr *ALL-NODES*)))))
