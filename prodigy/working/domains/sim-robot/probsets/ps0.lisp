(setf *test-probs* 

'((setf (current-problem)
      (create-problem
       (name SS0-1)
       (objects
	(a b BOX)
	(dr12 DOOR)
	(key12 KEY)
	(rm1 rm2 ROOM))
       (state
	(and (arm-empty)
	     (dr-to-rm dr12 rm2)
	     (dr-to-rm dr12 rm1)
	     (connects dr12 rm2 rm1)
	     (connects dr12 rm1 rm2)
	     (unlocked dr12)
	     (dr-open dr12)
	     (pushable A)
	     (inroom B rm2)
	     (inroom A rm1)
	     (inroom key12 rm2)
	     (inroom robot rm1)
	     (carriable key12)
	     (is-key dr12 key12)))
       (goal (next-to robot A))))

(setf (current-problem)
      (create-problem
       (name SS0-2)
       (objects
	(a b BOX)
	(dr12 DOOR)
	(key12 KEY)
	(rm1 rm2 ROOM))
       (state
	(and (arm-empty)
	     (dr-to-rm dr12 rm2)
	     (dr-to-rm dr12 rm1)
	     (connects dr12 rm2 rm1)
	     (connects dr12 rm1 rm2)
	     (unlocked dr12)
	     (dr-open dr12)
	     (pushable A)
	     (inroom B rm2)
	     (inroom A rm1)
	     (inroom key12 rm1)
	     (inroom robot rm1)
	     (carriable key12)
	     (is-key dr12 key12)))
       (goal (next-to robot key12))))

(setf (current-problem)
      (create-problem
       (name SS0-3)
       (objects
	(a b BOX)
	(dr12 DOOR)
	(key12 KEY)
	(rm1 rm2 ROOM))
       (state
	(and (arm-empty)
	     (dr-to-rm dr12 rm2)
	     (dr-to-rm dr12 rm1)
	     (connects dr12 rm2 rm1)
	     (connects dr12 rm1 rm2)
	     (unlocked dr12)
	     (dr-open dr12)
	     (pushable A)
	     (inroom B rm2)
	     (inroom A rm1)
	     (inroom key12 rm1)
	     (inroom robot rm1)
	     (carriable key12)
	     (is-key dr12 key12)))
       (goal (next-to robot dr12))))

(setf (current-problem)
      (create-problem
       (name SS0-4)
       (objects
	(a b BOX)
	(dr12 DOOR)
	(key12 KEY)
	(rm1 rm2 ROOM))
       (state
	(and (arm-empty)
	     (dr-to-rm dr12 rm2)
	     (dr-to-rm dr12 rm1)
	     (connects dr12 rm2 rm1)
	     (connects dr12 rm1 rm2)
	     (unlocked dr12)
	     (dr-open dr12)
	     (pushable A)
	     (inroom B rm2)
	     (inroom A rm1)
	     (inroom key12 rm1)
	     (inroom robot rm1)
	     (carriable key12)
	     (is-key dr12 key12)))
       (goal (inroom robot rm2))))

(setf (current-problem)
      (create-problem
       (name SS0-5)
       (objects
	(a b BOX)
	(dr12 DOOR)
	(key12 KEY)
	(rm1 rm2 ROOM))
       (state
	(and (arm-empty)
	     (dr-to-rm dr12 rm2)
	     (dr-to-rm dr12 rm1)
	     (connects dr12 rm2 rm1)
	     (connects dr12 rm1 rm2)
	     (unlocked dr12)
	     (dr-open dr12)
	     (pushable A)
	     (inroom B rm2)
	     (inroom A rm1)
	     (inroom key12 rm1)
	     (inroom robot rm1)
	     (carriable key12)
	     (is-key dr12 key12)))
       (goal (holding key12))))

(setf (current-problem)
      (create-problem
       (name SS0-6)
       (objects
	(a b BOX)
	(dr12 DOOR)
	(key12 KEY)
	(rm1 rm2 ROOM))
       (state
	(and (arm-empty)
	     (dr-to-rm dr12 rm2)
	     (dr-to-rm dr12 rm1)
	     (connects dr12 rm2 rm1)
	     (connects dr12 rm1 rm2)
	     (unlocked dr12)
	     (dr-open dr12)
	     (pushable A)
	     (inroom B rm2)
	     (inroom A rm1)
	     (inroom key12 rm1)
	     (inroom robot rm1)
	     (carriable key12)
	     (is-key dr12 key12)))
       (goal (locked dr12))))

(setf (current-problem)
      (create-problem
       (name SS0-7)
       (objects
	(a b BOX)
	(dr12 DOOR)
	(key12 KEY)
	(rm1 rm2 ROOM))
       (state
	(and (arm-empty)
	     (dr-to-rm dr12 rm2)
	     (dr-to-rm dr12 rm1)
	     (connects dr12 rm2 rm1)
	     (connects dr12 rm1 rm2)
	     (unlocked dr12)
	     (dr-open dr12)
	     (pushable A)
	     (inroom B rm1)
	     (inroom A rm1)
	     (inroom key12 rm1)
	     (inroom robot rm1)
	     (carriable key12)
	     (is-key dr12 key12)))
       (goal (next-to A B))))

(setf (current-problem)
      (create-problem
       (name SS0-8)
       (objects
	(a b BOX)
	(dr12 DOOR)
	(key12 KEY)
	(rm1 rm2 ROOM))
       (state
	(and (arm-empty)
	     (dr-to-rm dr12 rm2)
	     (dr-to-rm dr12 rm1)
	     (connects dr12 rm2 rm1)
	     (connects dr12 rm1 rm2)
	     (unlocked dr12)
	     (dr-open dr12)
	     (carriable B)
	     (inroom B rm1)
	     (inroom A rm1)
	     (inroom key12 rm1)
	     (inroom robot rm1)
	     (carriable key12)
	     (is-key dr12 key12)))
       (goal (next-to A B))))


(setf (current-problem)
      (create-problem
       (name SS0-9)
       (objects
	(a b BOX)
	(dr12 DOOR)
	(key12 KEY)
	(rm1 rm2 ROOM))
       (state
	(and (arm-empty)
	     (dr-to-rm dr12 rm2)
	     (dr-to-rm dr12 rm1)
	     (connects dr12 rm2 rm1)
	     (connects dr12 rm1 rm2)
	     (unlocked dr12)
	     (dr-open dr12)
	     (carriable B)
	     (inroom B rm1)
	     (inroom A rm1)
	     (inroom key12 rm1)
	     (inroom robot rm1)
	     (carriable key12)
	     (is-key dr12 key12)))
       (goal (inroom key12 rm2))))


(setf (current-problem)
      (create-problem
       (name SS0-10)
       (objects
	(a b BOX)
	(dr12 DOOR)
	(key12 KEY)
	(rm1 rm2 ROOM))
       (state
	(and (arm-empty)
	     (dr-to-rm dr12 rm2)
	     (dr-to-rm dr12 rm1)
	     (connects dr12 rm2 rm1)
	     (connects dr12 rm1 rm2)
	     (unlocked dr12)
	     (dr-open dr12)
	     (pushable B)
	     (inroom B rm1)
	     (inroom A rm1)
	     (inroom key12 rm1)
	     (inroom robot rm1)
	     (carriable key12)
	     (is-key dr12 key12)))
       (goal (inroom B rm2))))))
