/* START OF AUTOGENERATED CODE */
/* This file or section was automatically generated by playerinterfacegen.py */
#ifndef _EXAMPLE_INTERFACE_H_
#define _EXAMPLE_INTERFACE_H_

#include <libplayerinterface/player.h>

/** @ingroup message_codes
 * @{ */
#define PLAYER_EXAMPLE_CODE 128
/** @} 
 *  @ingroup message_strings
 * @{ */
#define PLAYER_EXAMPLE_STRING "example" 
/** @} */
// /////////////////////////////////////////////////////////////////////////////
/** @ingroup interfaces
  @defgroup interface_example example
  
 * The new interface is declared in this file. It consists of a few parts:
 *
 * #define'd interface code and name string
 *
 * These are used throughout the interface. Be careful not to conflict with
 * existing Player interfaces when setting them.
 *
 * Message subtype codes
 *
 * These are used by both the client and the server to differentiate between
 * different messages within the same type group (e.g. different types of data
 * message).
 *
 * Message structures
 *
 * Each message structure defines the layout of data in the body of a message.
 * One message structure can be used by multiple types and subtypes.
 *
 * Exported plugin interface function

*/
/**
  @ingroup interface_example
 * @{ */
 

/** Example data */
#define PLAYER_EXAMPLE_DATA_EXAMPLE 1

/** Example Request */
#define PLAYER_EXAMPLE_REQ_EXAMPLE 1

/** Example Command */
#define PLAYER_EXAMPLE_CMD_EXAMPLE 1



typedef struct player_eginterf_data
{
	uint32_t stuff_count;
	double *stuff;
} player_eginterf_data_t;

typedef struct player_eginterf_req
{
	int value;
} player_eginterf_req_t;

typedef struct player_eginterf_cmd
{
	char doStuff;
} player_eginterf_cmd_t;


 
/** @} */ 

#endif // _EXAMPLE_INTERFACE_H_
/* END OF AUTOGENERATED CODE */
