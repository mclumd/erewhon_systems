/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
}
PARSER_BEGIN(AlmaParser)
package almaparse;
import alma.*;
import java.io.*;

public class AlmaParser {
	public static void main(String args[]) throws Exception{
		AlmaParser ap = new AlmaParser(System.in);
		ap.interpret(new KnowledgeBase());
	}
	public void interpret(KnowledgeBase kb) throws ParseException, TokenMgrError{
		startCommands(kb);
	}
	
	public Formula readFormula(){
		try{
			FormulaBuilder fb = new FormulaBuilder();
			formula(fb);
			return fb.getFormula();
		} catch (ParseException pe){
			return null;
		}
	}
	
	public static Formula parseString(String s){
    	ByteArrayInputStream bais = new ByteArrayInputStream(s.getBytes());
    	AlmaParser ap = new AlmaParser(bais);
		return ap.readFormula();
	}

}

PARSER_END(AlmaParser)

SKIP : { " " | "\r" | "\t" | "\n" }

 TOKEN : {
 <ADD: "+">
| <DELETE: "-">
| <ATSK: "*">
| <AND: "&">
| <QST: "?">
| <TILD:"~">
| <OR: "|">
| <STEP: "step">
| <PRINT: "print">
| <WORD: (["a"-"z", "A"-"Z", "_"])+>
| <NUM: ([ "0" - "9"])+>
| <STRING: "\"" (~["\""])+ "\"">
}

TOKEN_MGR_DECLS : {
    static int commentDepth ;
}

SKIP : {  "/*" { commentDepth = 1 ; } : CCOMMENT}
<CCOMMENT>  SKIP : { "/*" {commentDepth += 1;}}
<CCOMMENT>  SKIP : { "*/" {commentDepth -= 1;SwitchTo( commentDepth==0 ? DEFAULT : CCOMMENT);}}
<CCOMMENT>  SKIP : {< ~[] >}

SKIP : {  "//" : CPPCOMMENT }
<CPPCOMMENT> SKIP : {"\n": DEFAULT} //Figure out a way to use EOL instead,
<CPPCOMMENT> SKIP : {< ~[] >}


//<command>	::=	<addcommand>"." | <deletecommand>"."| <distrustcommand>"." | "step." | "print."
void startCommands(KnowledgeBase kb) : 
{
	FormulaBuilder fb = new FormulaBuilder();
	Token t = null;
}
{
	command(fb)
	{kb.add(fb.getFormula());}
	(startCommands(kb) | <EOF>)
|
	LOOKAHEAD(2)
	<STEP> "."
	{kb.step();}
	(startCommands(kb) | <EOF>)
|
	<STEP> t = <NUM> "."
	{
	for(int i=0; i<Integer.parseInt(t.image); i++){
		kb.step();
	}
	kb.printHistory(System.out);
	}
	(startCommands(kb) | <EOF>)
|
	<PRINT> "."
	{kb.printHistory(System.out);}
	(startCommands(kb) | <EOF>)
}

void command(FormulaBuilder fb): {}{
	addCommand(fb)"." 
| 
	deleteCommand(fb)"." 
|	
	distrustCommand(fb)"."
|
	selectCommand(fb)"."
}

void selectCommand(FormulaBuilder fb) :{
	Token answer;
	Token variable;
	Token raw_numHits;
}
{
	"#" "{" answer = <WORD> "}" variable = <WORD> "[" raw_numHits = <NUM> "]" 
	{
		fb.addSelectCommand(Integer.parseInt(raw_numHits.image), answer.image, new Variable(variable.image));
	}
	formula(fb) {fb.endChildren();}
}

void addCommand(FormulaBuilder fb) : {}
{
	{fb.addAdd();}
	"+"
	formula(fb)
	{fb.endChildren();}
}

void deleteCommand(FormulaBuilder fb) : 
{ Token t = null; }
{
	LOOKAHEAD(2)
	"-"
	t = <NUM>
	{fb.addSpecificDelete(Integer.parseInt(t.image));}
|
	{fb.addDelete();}
	"-"
	formula(fb)
	{fb.endChildren();}
}

void distrustCommand(FormulaBuilder fb) : 
{}
{
	"*"
	formula(fb)
	{throw new UnsupportedOperationException("Distrust Command not yet implemented");}
}

void formula(FormulaBuilder fb):
{}
{
	( LOOKAHEAD( "(" (formula(fb2) | goalFormula(fb2)) "->" )
		ifFormula(fb) 
	| 
		basicFormula(fb)
	)
}

void ifFormula(FormulaBuilder fb):
{
	FormulaBuilder fb2 = new FormulaBuilder();
}
{
	"(" (formula(fb2) | goalFormula(fb2))
	( {fb.addIf();} "->"
	)
	{ fb.add(fb2);}
	(formula(fb) | goalFormula(fb) | addCommand(fb) | deleteCommand(fb))
	{fb.endChildren();}
	")"
}

void basicFormula(FormulaBuilder fb): 
{ FormulaBuilder fb2 = new FormulaBuilder(); }
{
	//And Formula
	LOOKAHEAD("(" basicFormula(fb2) "&")
	"(" basicFormula(fb2)
	{fb.addAnd();}"&" 
	{fb.add(fb2);}
	basicFormula(fb)
	( "&" basicFormula(fb) )*
	 ")"
	 {fb.endChildren();}
|
	//Or Formula
	"(" basicFormula(fb2)
	{fb.addOr();} 
	{fb.add(fb2);}
	"|" basicFormula(fb)
	( "|" basicFormula(fb) )*
	 ")"
	 {fb.endChildren();}
|
	{fb.addNot();} "~" 
	basicFormula(fb)
	{fb.endChildren();}
|
	{fb.addNegationByFailure();} "!"
	basicFormula(fb)
	{fb.endChildren();}
|
	predicate(fb)
}

void predicate(FormulaBuilder fb):
{
	Token t;
}
{
	t = <WORD> 
	{ fb.addPredicate(t.image); }
	"(" predicateParameter(fb)
	( "," predicateParameter(fb) )*
	{ fb.endChildren(); }
	")"
}

void predicateParameter(FormulaBuilder fb):
{
	Token t;
	String s;
	StringBuffer sb;
}
{
  LOOKAHEAD(2)
  formula(fb)
|
  t = <WORD>
  {
    if (Character.isUpperCase(t.image.charAt(0))){
      fb.addVariable(t.image);
    }
    else {
      fb.addConstant(t.image);
    }
  }
|
  t = <NUM>
  {fb.addTimeConst(Integer.parseInt(t.image));}
|
  t = <STRING>
  { s = t.image.substring(1, t.image.length()-1);
  	fb.addStringConst(s);}
}

void goalFormula(FormulaBuilder fb): {}
{
	"?"
	{throw new UnsupportedOperationException("GoalFormula not implemented");}
}
