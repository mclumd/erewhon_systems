.\" Time-stamp: <Fri Jan 10 11:48:34 EST 1997 ferguson>
.TH TSPEECHIN 1 "10 Jan 1997" "TRAINS Project"
.SH NAME
tspeechin \- TRAINS version of Sphinx-II speech recognizer
.SH SYNOPSIS
.IP tspeechin 10
[\-audio\ server] [\-bufnum\ N] [\-sex\ m|f] [\-dictfn\ file] [\-lmfn\ file]
.SH DESCRIPTION
.PP
.I Tspeechin
is a script that runs a version of the Sphinx-II speech recognition
system from Carnegie Mellon University, modified to work as a component
of the TRAINS system. This provides speaker-independent, incremental
speech recognition of words from audio provided by an AudioFile
server.
.PP
.I Tspeechin
is a "faceless" application, i.e., it has no display component
itself. It responds to KQML messages on stdin that start and stop
recognition, and broadcasts the results of the recognition to stdout.
When connected to the Input Manager,
.IR tim (1),
these outputs are treated as selective broadcasts and are sent to any
client that has LISTENed for them.
.I Tspeechin
also records the input audio in files named "utt.NNN.au", where NNN is
an utterance counter, and records the results of the recognition in
files named "utt.NNN.out". The audio files contain 16 kHz, 16-bit,
linear-encoded data with no headers.
.SH OPTIONS
.IP "-audio host:device"
Connect to the AudioFile server at the given address. The default is
the value of the environment variable AUDIOFILE, if set, otherwise the
current host.
.IP "-bufnum N"
Specify that the last
.I N
words of the current hypothesis should not be output (until the
utterance is ended). This prevents constant revision at the "frontier"
of the recognition, at the cost of some latency in the output. The
default is 2.
.IP "-sex m|f"
Specify the sex of speaker, used to select an appropriate acoustic
model. The default is `m'.
.IP "-dictfn file"
Specify the phonetic dictionary to be used. The default is the TRAINS
Dialogue Corpus dictionary, "tdc-75.dic".
dictionary.
.IP "-lmfn file"
Specify the language model to be used. The default is the TRAINS
Dialogue Corpus model, "tdc-75.bigram".
.SH USAGE
.PP
.I Tspeechin
first loads its acoustic and language model files, then connects to
the AudioFile server. It is assumed that the server is running using
an audio format compatible with Sphinx-II, namely 16 kHz, 16-bit,
linear-encoded samples.
.PP
Receipt of a START message initiates recognition, which includes
incrementing the utterance counter and broadcasting a START message.
Words are broadcast as they are recognized, with a BACKTO message
being used to indicate revision of a word previously output. The last
few words of the hypothesis are buffered to prevent excessive BACKTO's
(see the -bufnum argument). Receipt of a STOP message terminates the
utterance;
.I tspeechin
then finishes processing the utterance, outputs any remaining
words, and finally outputs an END message.
.PP
Note that the START and STOP messages are usually generated (in the
TRAINS System, at least) by the
.IR tspeechinx (1)
Speech Controller. This program also provides a display of speech
recognition results from both
.I tspeechin
and the Speech Post-Processor,
.IR tspeechinpp (1).
.SH "TSPEECHIN MESSAGES"
.PP
The following KQML messages are understood by
.IR tspeechin .
They
should be addressed with ":receiver SPEECH-IN". Case is insignificant outside
of strings. Whitespace between messages is ignored (but rigorously
enforced within messages according to the KQML spec).
.IP "(request :content (chdir DIR))"
Request that the Speech recognizer start writing its output files
("utt.NNN.au" and "utt.NNN.out") in the given
.IR DIR .
.IP "(request :content (start))"
Start recognition. Initiates processing of audio and broadcast of
recognized words.
.IP "(request :content (stop))"
Stop recognition. Stops processing audio and completes processing of
the current utterance.
.IP "(request :content (exit :status N))"
Request that 
.I tspeechin
exit with optional status N.
.IP "(request :content (start\-conversation :name N :lang L :sex S))"
Resets utterance counter to 1.
.IP "(request :content (end\-conversation)"
Ignored.
.IP "(request :content (show\-window))"
Ignored.
.IP "(request :content (hide\-window))"
Ignored.
.PP
The following messages are generated by
.I tspeechin
as selective broadcasts during recognition.
.IP "(tell :content (start :uttnum N))"
Broadcast to announce the start of a new utterance.
.IP "(tell :content (word W :uttnum N :index (I1 I2) :frame (F1 F2)))"
Broadcast to announce a new word in the hypothesis. The :index argument
identifies the start and end position of the word, which can in fact
be several words as far as the parser is concerned, as in the tokens
``I_WANT'', `NEW_YORK'', or ``COULDN'T''. Index positions start at 1.
A single number I can be given, implying ``(I\ I+1)''. The :frame
argument identifes the frames of acoustic data covered by the word.
.IP "(tell :content (backto :index I))"
Broadcast to indicate that any words previously output at index I or
beyond (inclusive) are no longer valid parts of the hypothesis.
.IP "(tell :content (stop :uttnum N))"
Broadcast to announce the end of the utterance.
.SH ENVIRONMENT
.PP
TRAINS_BASE		Used to find Sphinx-II model files
.br
AUDIOFILE			HOST:DEVICE for AudioFile server
.SH FILES
.PP
$TRAINS_BASE/etc/SpeechData	Location of default Sphinx-II files
.br
sphinx.log		Stuff printed by sphinx if anyone cares
.br
utt.NNN.au		Audio for utterance NNN
.br
utt.NNN.out		Summary of recognition for utterance NNN
.SH DIAGNOSTICS
.PP
Sometimes.
.SH SEE ALSO
.PP
trains(1),
tim(1),
tspeechx(1),
tspeechpp(1)
.SH NOTES
.I Tspeechin
is actually a shell script that invokes the underlying
Sphinx-II-derived program,
.IR tsphinx ,
with many of its parameters set appropriately. More subtle control can
be had by changing this script, if you know what you're doing.
See the manpage for
.IR fbs8_live (1)
in /s7/sphinx-ii/man.
.SH AUTHOR
.PP
George Ferguson (ferguson@cs.rochester.edu).


