<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>TrainsDM</TITLE>
<META NAME="Template" CONTENT="C:\Program Files\Microsoft Office\Office\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080">

<B><FONT SIZE=4><P ALIGN="CENTER">An Introduction to ACDM – Alma Carne Dialog Manager</P>
</B></FONT><FONT SIZE=2><P ALIGN="CENTER">Darsana V Purushothaman</P>
</FONT><P ALIGN="JUSTIFY">The ACDM is intended to be implemented as an agent that is capable of reasoning about the content of the ongoing dialog<I>, </I>learning about the environment from the dialog that is being carried out, and taking part in a reasonable dialog with the ‘human’ user. ACDM consists of the reasoning machinery ALMA and the action execution machinery CARNE. CARNE has several action handlers associated with it to help execute each action. Currently, ACDM interacts with the original TRAINS system developed at University of Rochester to plan the routes of trains in a test domain. The communication between ACDM and the TRAINS system is using standard KQML messages. </P>
<P ALIGN="JUSTIFY">In the TRAINS system, the parser converts each utterance to its logical form, the problem solver maintains the domain information, the output manager manages the screen display and speech output of the system, and the input manager coordinates the message handling between the different modules. For more information about the original TRAINS system refer to papers published by James Allen, George Ferguson etal.</P>
<P ALIGN="JUSTIFY">ACDM interacts with the parser, problem solver and output manager to perform the dialog management. When ACDM receives a new KQML message, ALMA sends a request to CARNE to decode the message using <I>ah_preprocess_msg</I>. CARNE then calls the appropriate action handler to extract the information and stores it in the ALMA database. Once the decoding is complete CARNE informs ALMA that the message has been decoded. From the information stored during the decoding phase, ALMA determines the sender of the message to decide its next action.</P>
<P ALIGN="JUSTIFY">ACDM recognizes those messages sent by the parser as utterances and interprets these utterances to determine the external actions to be performed. External actions could involve changing the state of the problem solver and/or providing a response to the user. Currently, ALMA learns about the environment by keeping track of the state of the problem solver before and after processing of each utterance. ALMA uses the domain knowledge together with the interpretation of the action to be performed to determine its responses in the ongoing dialog.</P>
<B><P ALIGN="JUSTIFY">Levels in dialog management</P>
</B><P ALIGN="JUSTIFY">ACDM performs the dialog management in six different levels LREQ, IREQ, DREQ, PACT, EACT and OACT as suggested in Traum and Andersen (). Each of these levels deals with different aspects of an utterance and it is at the EACT level that the system produces a response to the user or executes an action requested by the user. It should be noted that the interpretation of a user utterance need not follow a strict sequence through the six levels; instead it could involve iteration over or even toggling between different levels. </P>
<B><I><P ALIGN="JUSTIFY">LREQ Level:</P>
</B></I><P ALIGN="JUSTIFY">If the sender of the KQML message received by ACDM is the parser, then ALMA recognizes that the message is in-fact a new utterance and the information that is stored in its database for this message is in-fact the content of the actual utterance. The LREQ level constitutes identification of a new utterance, updating the data structure containing the utterance numbers and storing of the content of the actual utterance. </P>
<B><I><P ALIGN="JUSTIFY">IREQ Level:</P>
</B></I><P ALIGN="JUSTIFY">Once LREQ level is completed, ALMA reasons that the IREQ of the given utterance has to be created, and hence requests CARNE to compute the IREQ of the given utterance using <I>ah_translate_parse</I> action handler. CARNE then performs the specified action to interpret the stored information for the current utterance and stores the interpretation in the ALMA database. This interpretation involves identifying the type and semantics of the utterance, and the different objects and paths mentioned in the utterance. In addition this level associates the known properties (like lex, class, status and sort) of objects mentioned in the utterance to the corresponding objects. </P>
<B><I><P ALIGN="JUSTIFY">DREQ Level:</P>
</B></I><P ALIGN="JUSTIFY">The dialog manager then performs disambiguation on the current interpretation to compute the DREQ of the utterance. The particular disambiguation to be carried out is dependent on the type of the utterance. Note that the utterance type is obtained at the previous (IREQ) level. The utterance types that the dialog manager deals with currently are ‘sa-request’, ‘sa-reject’, ‘sa-yn-question’ and ‘sa-wh-question’.</P>
<P ALIGN="JUSTIFY">For ‘sa-request’ and ‘sa-wh-question’ type utterances, the disambiguation involves binding all objects with a lexical name. If there are objects that are not yet bound to a lexical name, then ALMA requests CARNE to pose an ‘ask-all’ type knowledge base request to the problem solver, to obtain the current position of all the trains in the system. ALMA sends this request to CARNE using a call to <I>ah_kbr_question</I>. CARNE uses the appropriate action handlers to construct and send a knowledge base request to the problem solver. The reply from the problem solver arrives as a message to ALMA, and ALMA then requests CARNE to translate this reply. The action handler used for translating the response of knowledge base requests is <I>ah_translate_kbr</I>. The translation process results in binding the unbound objects, ie., those objects without a lexical name associated with them will get bound to actual lexical names.</P>
<P ALIGN="JUSTIFY">For ‘sa-yn-question’ type utterances, first ALMA checks whether all variables are bound. If there are objects without a lexical name associated with it, then ALMA requests CARNE to obtain the bindings using <I>ah_kbr_question </I>and<I> ah_translate_kbr</I> as in ‘sa-request’ utterances. Once all object variables are bound to some lexical value, ALMA poses a series of ‘ask-if’ knowledge base requests to the problem solver via CARNE, to check whether all the conditions specified in the utterance hold true in the problem solver. CARNE also translates the replies from the problem solver and asserts the information into ALMA database. If any of the conditions fails then ALMA asserts the result of the utterance as nil; if all the conditions hold then the result is asserted as true.</P>
<P ALIGN="JUSTIFY">For utterances of type ‘sa-reject’, ALMA determines the previous utterance, the action of which has to be undone and identifies the state of the problem solver before the action was carried out. </P>
<B><I><P ALIGN="JUSTIFY">PACT Level:</P>
</B></I><P ALIGN="JUSTIFY">The PACT level involves both planning the action to be performed to change the state of the problem solver if required and planning the response to the user. For ‘sa-yn-question’ and ‘sa-wh-question’ utterances, the result that is obtained from the problem solver at the DREQ level provides the content for the actual output to the user. Since these types of utterances are not meant to change the state of the problem solver, the only planning required for these utterances is for producing a response to the user. </P>
<P ALIGN="JUSTIFY">Utterances of type ‘sa-request’, on the other hand, involve planning for both action and response. ALMA requests CARNE to send an interpretation request to the problem solver using <I>ah_ir_question, </I>to obtain a new-sub-plan for the scenario in the utterance. Once the problem solver sends a reply, ALMA requests CARNE to translate the reply message. CARNE translates the message using the action handler routine and asserts the information including the result in ALMA database. If the result is nil, then ALMA requests CARNE to obtain a ‘do-what-you-can-plan’ using <I>ah_ir_question</I>. Again, the reply is translated using <I>ah_translate_ir </I>and all information including the result is stored in ALMA database. The stored result forms the content for the response to the user.</P>
<P ALIGN="JUSTIFY">For ‘sa-reject’ type utterances, the PACT level involves obtaining the state of the problem solver before the action that is being undone was carried out. This state denotes the state to which the problem solver will be reverted to once the undo operation is completed.</P>
<B><I><P ALIGN="JUSTIFY">EACT Level:</P>
</B></I><P ALIGN="JUSTIFY">Changing the problem solver state by performing the action implied in the utterance and sending KQML messages to the output manager are performed at this level. The state of the problem solver is changed using the action handler routine <I>ah_ur_question</I>. ALMA requests CARNE to send messages to output manager using <I>ah_outmgrconfirm</I>. At this level also, the sequence of steps to be followed depends on the type of utterance. </P>
<P ALIGN="JUSTIFY">For ‘sa-yn-question’, if result is nil a <B>deny</B> message is sent to output manager; otherwise an <B>affirm</B> message is sent to output manager. For ‘sa-reject’ utterance, ALMA requests CARNE to undo the problem solver to the specified state and also to send a message to the output manager to inform the user about the undo operation that has been carried out. For ‘sa-wh-question’, an <B>inform </B>message is sent to the output manager to provide the user with the result from the problem solver. For ‘sa-request’ utterance, ALMA requests CARNE to update the problem solver state with the current plan and to send an <B>inform-plan</B> message to output manager. The output manager then responds to the user with the current plan information.</P>
<P ALIGN="JUSTIFY">&nbsp;</P>
<B><I><P ALIGN="JUSTIFY">OACT Level:</P>
</B></I><P ALIGN="JUSTIFY">This level deals with confirming that the actions requested have been performed correctly. Whenever the problem solver state is updated (using <I>ah_ur_question</I>), ALMA verifies that the request has been successfully completed using <I>ah_confirmsuccess</I> action handler. ALMA notes the success or failure of different actions in its database.</P></BODY>
</HTML>
