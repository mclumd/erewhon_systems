File   : maps.doc
Author : Richard A. O'Keefe
SCCS   : @(#)88/11/10 maps.doc	27.1
Purpose: Documentation for library(maps).

		    Finite Maps

    A finite map is a function from terms to terms with a finite domain.
    This definition actually implies that its domain consists of  ground
    terms,  and  the  code  below  assumes  that.  The representation is
    similar to the representation  for  bags  (indeed  a  bag  could  be
    regarded  as a map from keys to integers), that is, the empty map is
    'map' and any other map is
	map(Key,Val,Map)
    where Map is a finite map and Key is @< than every key in Map.
    See also library(assoc), which isn't so good at operations on whole
    maps, but is better at looking up and updating single elements.

is_map(Thing)
    is true when Thing is a map.  If you  use  the  predicates  in  this
    file, you have no way of constructing a map with an unbound tail, so
    such  structures  are NOT recognised as bags (this avoids a possible
    infinite loop.

list_to_map(+KeyValList, ?Map)
    takes  a  list  of  Key-Value  pairs  and  orders  them  to  form  a
    representation  of a finite map.  The list may not have two elements
    with the same Key.

map_agree(+Map1, +Map2)
    is true if whenever Map1 and Map2 have a key in common,  they  agree
    on its value.  If they have no keys in common they agree.

map_compose(+Map1, +Map2, ?Composition)
    constructs Map1 o Map2.  That is, for each K-T  in  Map1  such  that
    there is a T-V in Map2, K-V is in Composition.  The way this is done
    requires  the  range  of Map1 to be ground as well as the domains of
    both maps, but then any fast composition has the same problem.

map_disjoint(+Map1, +Map2)
    is true when the two maps have no domain elements in  common.   That
    is,  if  K-V1  is  in Map1, there is no K-V2 in Map2 and conversely.
    This implementation assumes you have loaded the ordered sets file.

map_domain(+Map, ?Domain)
    unifies Domain with the ordered set representation of the domain  of
    the  finite  map  Map.   As the keys (domain elements) of Map are in
    ascending order and there are no duplicates, this is trivial.

map_exclude(+Map, +Set, ?Restricted)
    constructs a restriction of the Map by dropping members of  the  Set
    from  the  Restricted  map's  domain.   That  is, Restricted and Map
    agree, but
	domain(Restricted) = domain(Map)\Set.
    Set must be an *ordered* set.

map_include(+Map, +Set, ?Restricted)
    constructs a restriction of the Map by dropping everything which  is
    NOT  a member of Set from the restricted map's domain.  That is, the
    Restricted and original Map agree, but
	domain(Restricted) = domain(Map) intersection Set.
    Set must be an *ordered* set.

map_intersection(+Map1, +Map2, ?Map)
    unifies Map with the intersection of the two  given  maps  Map1  and
    Map2.  That is, map_value(Map, Key, Val) is true if and only if both
    map_value(Map1, Key, Val)  and   map_value(Map2, Key, Val)  are true.
    If Map1 and Map2 are both defined on Key,  but  associate  different
    values with it, Map will not be defined on Key at all.
    Fernando C. N. Pereira @ SRI wrote this predicate.

map_invert(+Map, ?Inverse)
    unifies Inverse with the inverse of a finite invertible map.  All we
    do is swap the pairs round, sort,  and  check  that  the  result  is
    indeed a map.

map_map(+Predicate, +Map1, ?Map2)
    composes Map1 with the Predicate, so that K-V2 is in Map2 if K-V1 is
    in Map1 and Predicate(V1,V2).

map_range(+Map, ?Range)
    unifies Range with the ordered set representation of  the  range  of
    the  finite  map  Map.   Note  that  the cardinality (length) of the
    domain and  the  range  are  seldom  equal,  except  of  course  for
    invertible maps.

map_to_assoc(+Map, ?Assoc)
    converts a finite map held as an ordered list of Key-Val pairs to an
    ordered binary tree such as the library file ASSOC works  on.   This
    predicate  calls  an  internal routine of that file, so both must be
    compiled or both interpreted.  Eventually the two  files  should  be
    combined.

map_to_list(+Map, ?KeyValList)
    converts a map from its compact form to a list of Key-Val pairs such
    as keysort yields or list_to_assoc wants.

map_union(+Map1, +Map2, ?Union)
    forms the union of the two given maps.  That is
	Union(X) = Map1(X) if it is defined, or Map2(X) if that is.
    But when both are defined, both must agree.  (See map_update for a
    version where Map2 overrides Map1.)

map_update(+Base, +Overlay, ?Updated)
    combines the finite maps Base and Overlay as map_union does,  except
    that  when both define values for the same key, the Overlay value is
    taken regardless of the Base value.  This  is  useful  for  changing
    maps (you may know it as the "mu" function).

map_update(+Map, +Key, +Val, ?Updated)
    computes an Updated map which is the same as  Map  except  that  the
    image  of Key is Val, rather than the image it had under Map if any.
    This is an O(N) operation, not O(1).  By using trees  we  could  get
    O(lgN).  Eventually this package should be merged with ASSOC.PL.

map_value(+Map, +Arg, ?Result)
    applies the finite map Map to an argument, and unifies  Result  with
    the  answer.  It fails if Arg is not in the domain of Map, or if the
    value does not unify with Result.  Note that this operation is  O(N)
    like  all  the  others;  this package is really meant for working on
    maps as wholes.  We can achieve O(lgN) by using trees (as in ASSOC),
    and eventually MAP and ASSOC should be merged.  In  the  mean  time,
    use map_to_assoc to convert a map to a tree for faster lookup.

portray_map(+Map)
    writes a finite Map to the current output stream in a pretty form so
    that you can easily see what it is.  Note that  a  map  written  out
    this  way  can  NOT be read back in.  The point of this predicate is
    that you can add a clause
	portray(X) :- is_map(X), !, portray_map(X).
    to get maps displayed nicely by print/1.

