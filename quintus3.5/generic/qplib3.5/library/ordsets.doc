Package: ordsets
Author : R.A.O'Keefe
SCCS   : @(#)88/11/10 ordsets.doc	27.1
Purpose: ORDered SET manipulation utilities

In this module, sets are represented by ordered lists with no
duplicates.  Thus {c,r,a,f,t} would be [a,c,f,r,t].  The ordering
is defined by the @< family of term comparison predicates, which
is the ordering used by sort/2 and setof/3.

The benefit of the ordered representation is that the elementary
set operations can be done in time proportional to the Sum of the
argument sizes rather than their Product.  Some of the unordered
set routines, such as member/2, length/2,, select/3 can be used
unchanged.  The main difficulty with the ordered representation is
remembering to use it!


is_ordset(+List)
   is true when List is a list of terms [T1,T2,...,Tn] and the
   terms are strictly increasing: T1 @< T2 @< ... @< Tn.  The
   output of sort/2 always satisfies this test.  Anything which
   satisfies this test can be given to the predicates in this
   file, regardless of where you got it.


list_to_ord_set(+List, ?Set)
   is true when Set is the ordered representation of the set represented
   by the unordered representation List.  The only reason for giving it
   a name at all is that you may not have realised that sort/2 could be
   used this way.


ord_add_element(+Set1, +Element, ?Set2)
   is the equivalent of add_element for ordered sets.  It should give
   exactly the same result as merge(Set1, [Element], Set2), but a bit
   faster, and certainly more clearly.


ord_del_element(+Set1, +Element, ?Set2)
   is the equivalent of del_element for ordered sets.  In fact the two
   are identical.  I am beginning to wonder whether a predicate
	set_plus(SmallSet, Element, LargeSet)
   would be a better way of doing this, the idea being that
   LargeSet = SmallSet U {Element} and Element is not in SmallSet.
   There is already a predicate with this effect called select/3.


ord_disjoint(+Set1, +Set2)
   is true when the two ordered sets have no element in common.  If the
   arguments are not ordered, I have no idea what happens.


ord_intersect(+Set1, +Set2)
   is true when the two ordered sets have at least one element in common.
   Note that the test is == rather than = .


ord_intersect(+Set1, +Set2, ?Intersection)
   is true when Intersection is the ordered representation of Set1
   and Set2, provided that Set1 and Set2 are ordered sets.


ord_seteq(+Set1, +Set2)
   is true when the two arguments represent the same set.  Since they
   are assumed to be ordered representations, they must be identical.


ord_setproduct(+Set1, +Set2, ?Product)
   is in fact identical to setproduct(Set1, Set2, Product).
   If Set1 and Set2 are ordered sets, Product will be an ordered
   set of x1-x2 pairs.


ord_subset(+Set1, +Set2)
   is true when every element of the ordered set Set1 appears in the
   ordered set Set2.


ord_subtract(+Set1, +Set2, ?Difference)
   is true when Difference contains all and only the elements of Set1
   which are not also in Set2.


ord_symdiff(+Set1, +Set2, ?Difference)
   is true when Difference is the symmetric difference of Set1 and Set2.


ord_union(+Set1, +Set2, ?Union)
   is true when Union is the union of Set1 and Set2.  Note that when
   something occurs in both sets, we want to retain only one copy.

