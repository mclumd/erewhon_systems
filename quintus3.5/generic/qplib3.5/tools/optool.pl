/*

    File: optool.pl
    SCCS: @(#)90/09/10 optool.pl    56.2

    This is a tool to tell you which of a set of files which make up a
    program need to have operator declarations added to them in order
    to allow the program to be successfully generated by 'qpc'.  Invoke this
    program by typing:

        <OS prompt> qpoptool File1 File2 ...

*/

:- ensure_loaded([
	library(basics),
	library(files)
   ]).


runtime_entry(start) :- unix(argv(Files)), go(Files), halt.

go(FileOrFiles) :-
    init_tables,
    optool_all(FileOrFiles),
    fail.
go(_).

:- dynamic done/1, needs_op_decl/3, operator/4.

init_tables :-
    retractall(done(_)),
    retractall(needs_op_decl(_,_,_)),
    retractall(operator(_,_,_,_)).


optool_all(Files) :-
    member_or_atom(File0,Files),
    absolute_file_name(File0, File),
    \+ done(File),
    assert(done(File)),
    optool(File),
    fail.
optool_all(_).

member_or_atom(A, A) :- atom(A), !.
member_or_atom(X, L) :- member(X,L).

optool(File) :-
    file_must_exist(File, read),
    format('~a:~n', File),
    current_input(OldStream),
    open(File, read, NewStream),
    set_input(NewStream),
    repeat,
	read(Term),
        note_ops_used(Term, File),
	process_to_eof(Term),
    !,
    close(NewStream),
    set_input(OldStream),
    output_operators(File).

note_ops_used(Term, File) :-
    ( var(Term) -> true
    | atomic(Term) -> true
    | otherwise ->
        functor(Term, Name, Arity),
        note_if_operator(Name, Arity, File),
        note_ops_in_args(Arity, Term, File)
    ).

note_ops_in_args(0, _, _) :- !.
note_ops_in_args(N, Term, File) :-
    arg(N, Term, Arg),
    note_ops_used(Arg, File),
    M is N-1,
    note_ops_in_args(M, Term, File).
    
note_if_operator(Name, Arity, File) :-
    operator(Name, Priority, Type, OpDecFile),
    right_arity(Type, Arity),
    !,
    note_operator(Name, op(Priority,Type,Name), File, OpDecFile).
note_if_operator(_, _, _).

note_operator(_, _, SameFile, SameFile) :- !.
note_operator(Name, OpDec, File, _) :-
    needs_op_decl(Name, OpDec, File),
    !.
note_operator(Name, OpDec, File, _) :-
    assertz( needs_op_decl(Name, OpDec, File) ).

right_arity(fx, 1).
right_arity(fy, 1).
right_arity(xf, 1).
right_arity(yf, 1).
right_arity(xfx, 2).
right_arity(yfx, 2).
right_arity(xfy, 2).

process_to_eof(end_of_file) :- !.
process_to_eof((:- Command)) :-
    nonvar(Command),
    process_command(Command),
    fail.

process_command(Declaration) :-
    is_declaration(Declaration),
    !.
process_command(Command) :-
    process_sub_commands(Command), 
    !.
process_command(_) :-
    current_input(Stream),
    line_count(Stream, LineNum0),
    LineNum is LineNum0-1,    
    format('Line:    ~d (approx)~n', [LineNum]).

process_sub_commands((X,Y)) :- !,
    process_sub_commands(X),
    process_sub_commands(Y).
process_sub_commands(op(P,T,O)) :-
    current_input(Stream),
    current_stream(File, _, Stream),
    process_op_decl(O, P, T, File),
    !.
process_sub_commands(LoadCommand) :-
    is_load_command(LoadCommand, Files),
    !,
    optool_all(Files).
process_sub_commands(CommandOrDecl) :-
    is_acceptable_command(CommandOrDecl),
    !.
process_sub_commands(X) :-
    format('Warning: compile-time goal may not work as expected in qpc~n',[]),
    format('Goal:    ~q~n', [X]),
    fail.

process_op_decl(List, Priority, Type, File) :- 
    nonvar(List),
    List = [_|_],
    !,
    process_op_decl_list(List, Priority, Type, File).
process_op_decl(Atom, Priority, Type, File) :-
    op(Priority, Type, Atom),
    asserta( operator(Atom, Priority, Type, File) ).

process_op_decl_list([Head|Tail], Priority, Type, File) :-
    process_op_decl(Head, Priority, Type, File),
    process_op_decl_list(Tail, Priority, Type, File).
process_op_decl_list([], _, _, _).
    

is_load_command(compile(Files), Files).
is_load_command(consult(Files), Files).
is_load_command(reconsult(Files), Files).
is_load_command([Files], [Files]).
is_load_command(ensure_loaded(Files), Files).
is_load_command(use_module(Files), Files).
is_load_command(use_module(File,_), File).
is_load_command(use_module(_,File,_), File).

is_acceptable_command(load_foreign_files(_,_)).
is_acceptable_command(no_style_check(_)).
is_acceptable_command(style_check(_)).
is_acceptable_command(abolish(_)).
is_acceptable_command(abolish(_,_)).
is_acceptable_command(initialization(_)).

is_declaration(public(_)).
is_declaration(mode(_)).
is_declaration(meta_predicate(_)).
is_declaration(module(_,_)).
is_declaration(dynamic(_)).
is_declaration(multifile(_)).

output_operators(File) :-
    bagof(OpDec, Name^needs_op_decl(Name,OpDec,File), OpDecList),
    output_ops(OpDecList).    

output_ops([]).
output_ops([OpDec|Rest]) :-
    tab(4), writeq((:- OpDec)), put("."), nl,
    output_ops(Rest).

