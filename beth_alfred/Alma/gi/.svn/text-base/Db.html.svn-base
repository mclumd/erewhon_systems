<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--NewPage-->
<html>
<head>
<!-- Generated by javadoc on Mon Oct 16 21:16:40 EDT 2000 -->
<title>
  Class Db
</title>
</head>
<body>
<a name="_top_"></a>
<h1>
  Class Db
</h1>
<pre>
java.lang.Object
   |
   +----java.lang.Thread
           |
           +----Db
</pre>
<hr>
<dl>
  <dt> public class <b>Db</b>
  <dt> extends Thread
</dl>
This class keeps track of the contents of the database and its history.
 <br>
 If the GUI is supposed to connect to a running alma process, we start
 a server for the alma history output to connect to. Otherwise we get
 connect to the URL of the history file.
 <br>
 The sockets or the history file are read through an input buffer. As long
 as there is information in the buffer, we parse it according to the 
 syntax of the history output.
 <br>
 This information is then used to build the view of the KB as time proceeds.
 <br>
 See elsewhere for a description of the GUI panel generated by this class.
<p>
<hr>
<a name="index"></a>
<h2>
  <img src="images/variable-index.gif" width=207 height=38 alt="Variable Index">
</h2>
<dl>
  <dt> <img src="images/magenta-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#historyWin"><b>historyWin</b></a>
  <dd> 
</dl>
<h2>
  <img src="images/constructor-index.gif" width=275 height=38 alt="Constructor Index">
</h2>
<dl>
  <dt> <img src="images/yellow-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#Db(boolean, java.lang.String)"><b>Db</b></a>(boolean, String)
  <dd>  The constructor needs to know whether we are to read the history from 
 a file, and if it is available, the name of the file.
</dl>
<h2>
  <img src="images/method-index.gif" width=207 height=38 alt="Method Index">
</h2>
<dl>
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#addToDb(Formula)"><b>addToDb</b></a>(Formula)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#displayStepNumber()"><b>displayStepNumber</b></a>()
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#dumpDb()"><b>dumpDb</b></a>()
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getDisplayedStep()"><b>getDisplayedStep</b></a>()
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getFirstChange(int, int)"><b>getFirstChange</b></a>(int, int)
  <dd>  Given the current step displayed and the desired step, this finds the
 first place the two steps differ.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#getHistoryPanel()"><b>getHistoryPanel</b></a>()
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#makeHistoryPanel()"><b>makeHistoryPanel</b></a>()
  <dd>  This makes the display for the DB and the history.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#removeFromDb(int)"><b>removeFromDb</b></a>(int)
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#resetDb()"><b>resetDb</b></a>()
  <dd>  This method is used to clear our record of the formulas in the Db.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#run()"><b>run</b></a>()
  <dd>  This method repeatedly tries to parse input according to the
 history syntax.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#synchronizeWindow()"><b>synchronizeWindow</b></a>()
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#unsynchronizeWindow()"><b>unsynchronizeWindow</b></a>()
  <dd> 
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#updateWindow(int, int)"><b>updateWindow</b></a>(int, int)
  <dd>  After a new step has been read, this updates the window.
</dl>
<a name="variables"></a>
<h2>
  <img src="images/variables.gif" width=153 height=38 alt="Variables">
</h2>
<a name="historyWin"><img src="images/magenta-ball.gif" width=12 height=12 alt=" o "></a>
<b>historyWin</b>
<pre>
 public TextArea historyWin
</pre>
<a name="constructors"></a>
<h2>
  <img src="images/constructors.gif" width=231 height=38 alt="Constructors">
</h2>
<a name="Db"></a>
<a name="Db(boolean, java.lang.String)"><img src="images/yellow-ball.gif" width=12 height=12 alt=" o "></a>
<b>Db</b>
<pre>
 public Db(boolean FromFile,
           String fName)
</pre>
<dl>
  <dd> The constructor needs to know whether we are to read the history from 
 a file, and if it is available, the name of the file.
<p>
</dl>
<a name="methods"></a>
<h2>
  <img src="images/methods.gif" width=151 height=38 alt="Methods">
</h2>
<a name="getHistoryPanel()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getHistoryPanel"><b>getHistoryPanel</b></a>
<pre>
 public Panel getHistoryPanel()
</pre>
<a name="run()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="run"><b>run</b></a>
<pre>
 public void run()
</pre>
<dl>
  <dd> This method repeatedly tries to parse input according to the
 history syntax.
<br>
 If we are reading from a file and we reach the end of the file, 
 we wait for a new file to be loaded. In the case of a running alma,
 we wait for more history information to be available on the sockets.
<p>
  <dd><dl>
    <dt> <b>Overrides:</b>
    <dd> <a href="java.lang.Thread.html#run()">run</a> in class Thread
  </dl></dd>
</dl>
<a name="addToDb(Formula)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="addToDb"><b>addToDb</b></a>
<pre>
 public void addToDb(<a href="Formula.html#_top_">Formula</a> form)
</pre>
<a name="removeFromDb(int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="removeFromDb"><b>removeFromDb</b></a>
<pre>
 public void removeFromDb(int formIndex)
</pre>
<a name="dumpDb()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="dumpDb"><b>dumpDb</b></a>
<pre>
 public void dumpDb()
</pre>
<a name="resetDb()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="resetDb"><b>resetDb</b></a>
<pre>
 public void resetDb()
</pre>
<dl>
  <dd> This method is used to clear our record of the formulas in the Db.
 This correponds to the reset_alma command.
<p>
</dl>
<a name="updateWindow(int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="updateWindow"><b>updateWindow</b></a>
<pre>
 public int updateWindow(int firstChange,
                         int stepToDisplay)
</pre>
<dl>
  <dd> After a new step has been read, this updates the window.
 We update the minimum possible instead of redrawing the wholw
 window at each step.
<p>
</dl>
<a name="getFirstChange(int, int)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getFirstChange"><b>getFirstChange</b></a>
<pre>
 public int getFirstChange(int initialStep,
                           int newStep)
</pre>
<dl>
  <dd> Given the current step displayed and the desired step, this finds the
 first place the two steps differ.
 This is used to know which parts of the window do not need updating.
<p>
</dl>
<a name="synchronizeWindow()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="synchronizeWindow"><b>synchronizeWindow</b></a>
<pre>
 public void synchronizeWindow()
</pre>
<a name="unsynchronizeWindow()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="unsynchronizeWindow"><b>unsynchronizeWindow</b></a>
<pre>
 public void unsynchronizeWindow()
</pre>
<a name="getDisplayedStep()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="getDisplayedStep"><b>getDisplayedStep</b></a>
<pre>
 public int getDisplayedStep()
</pre>
<a name="displayStepNumber()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="displayStepNumber"><b>displayStepNumber</b></a>
<pre>
 public void displayStepNumber()
</pre>
<a name="makeHistoryPanel()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="makeHistoryPanel"><b>makeHistoryPanel</b></a>
<pre>
 public void makeHistoryPanel()
</pre>
<dl>
  <dd> This makes the display for the DB and the history.
 <br>
 The formulas are displayed as:
 <br>
 &lt FORMULA NAME &gt : &lt PRINTABLE FORMULA &gt
 <br>
 The formula name is a string that can be used to identify the formula
 in other literals. The printable formula is an intuitive rendering
 of the formula though it may not correspond exactly to the formula
 entered.
 <br>
 The control panel is:
 <img src="dbcontrol.gif">
 <br>
 <ul>
 <li>
 The first button dispalys the first step in the history.
 <li>
 The second button moves back one step in the history.
 <li>
 The third button, causes the step in the text field to be displayed.
 <li>
 The text field serves to display the step number of the step that is
 being displayed. It is editable and can also be used to specify a 
 particular step to display.
 The fourth button causes the next step to be displayed. If there are no
 more steps, this will not cause new steps to be computed.
 <li>
 The fifth button causes the last step to be displayed. This serves
 another purpose which is to synchronize the display with the input
 steps. 
 </ul>
 In usual operation, with alma computing steps instead of reading
 from a file, the latest available step is displayed. However,
 if any one of the buttons but the last is used, the display is no
 longer synchronized with the steps that are being computed by alma.
 This allows one to inspect previous steps without always jumping to 
 the latest step. 
 <br>
 The last button resynchronizes the display with the running alma so
 that the latest computed step is displayed.
 <br>
 In history file mode, an additional panel is displayed:
 <br>
 <img src="urlload.gif">
 <br>
 This allows one to load new history files. Loading a new file causes
 the previous information to be lost.
<p>
</dl>
</body>
</html>
