<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!--NewPage-->
<html>
<head>
<!-- Generated by javadoc on Mon Oct 16 21:16:40 EDT 2000 -->
<title>
  Class Gui
</title>
</head>
<body>
<a name="_top_"></a>
<h1>
  Class Gui
</h1>
<pre>
java.lang.Object
   |
   +----java.awt.Component
           |
           +----java.awt.Container
                   |
                   +----java.awt.Panel
                           |
                           +----java.applet.Applet
                                   |
                                   +----Gui
</pre>
<hr>
<dl>
  <dt> public class <b>Gui</b>
  <dt> extends Applet
</dl>
A GUI for a running alma process or for alma history files.
 The state of the alma kb is kept track of through the history output. 
 There is also a connection to the stdio of alma through which all the
 usual alma commands can be executed
 <br>
 There are three main windows: the KB display window, the alma control
 window and the IO window. See details for these elsewhere.
 <br>
 There are two main modes of operation: as an interface to a running 
 alma process or as a history reader. In the latter case only the KB 
 display window is produced. Also, in the latter case, the applet is
 viewable using netscape whereas in the former case, the applet will
 run with the appletviewer.
 <br>
 Arguments: <br>
 <ul>
 <li>
 almaArgs. The value of this should be the string that is to be used to
 exec alma. The default is: "alma run false keyboard true histocket htcp 
 prompt false". If you decide to change that, make sure that the histocket,
 prompt, and keyboard values are as in the default.
 <li>
 autoExec. The value is true or false. The default is false. If it is true,
 alma will be execed on start-up, otherwise it will be execed when the
 'Exec' button is clicked. 
 <li>
 historyFromFile. Value true or false. If true, the GUI will run in 
 hostory reader mode. Default is false. The history file can be specified
 in the GUI or through the next parameter.
 <li>
 historyInputURLName. The value of that is the URL for the history file
 that is to be read. There is no default.
 <li>
 verbose. Value is true or false. Default is false. 
 </ul>
<p>
<hr>
<a name="index"></a>
<h2>
  <img src="images/variable-index.gif" width=207 height=38 alt="Variable Index">
</h2>
<dl>
  <dt> <img src="images/blue-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#tty"><b>tty</b></a>
  <dd> 
</dl>
<h2>
  <img src="images/constructor-index.gif" width=275 height=38 alt="Constructor Index">
</h2>
<dl>
  <dt> <img src="images/yellow-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#Gui()"><b>Gui</b></a>()
  <dd> 
</dl>
<h2>
  <img src="images/method-index.gif" width=207 height=38 alt="Method Index">
</h2>
<dl>
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#init()"><b>init</b></a>()
  <dd>  Here we start a history reader and if there is a need for it, an
 io interface and a control interface to some alma process.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#makeControlPanel(java.awt.Panel)"><b>makeControlPanel</b></a>(Panel)
  <dd>  The control panel enables the user to control the running of alma.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#makeIOPanel(java.awt.Panel)"><b>makeIOPanel</b></a>(Panel)
  <dd>  The IO panel reads and writes to the alma process though stdio.
  <dt> <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#startAlma()"><b>startAlma</b></a>()
  <dd>  This execs the alma according to the almaArgs.
</dl>
<a name="variables"></a>
<h2>
  <img src="images/variables.gif" width=153 height=38 alt="Variables">
</h2>
<a name="tty"><img src="images/blue-ball.gif" width=12 height=12 alt=" o "></a>
<b>tty</b>
<pre>
 public static TextArea tty
</pre>
<a name="constructors"></a>
<h2>
  <img src="images/constructors.gif" width=231 height=38 alt="Constructors">
</h2>
<a name="Gui"></a>
<a name="Gui()"><img src="images/yellow-ball.gif" width=12 height=12 alt=" o "></a>
<b>Gui</b>
<pre>
 public Gui()
</pre>
<a name="methods"></a>
<h2>
  <img src="images/methods.gif" width=151 height=38 alt="Methods">
</h2>
<a name="init()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="init"><b>init</b></a>
<pre>
 public void init()
</pre>
<dl>
  <dd> Here we start a history reader and if there is a need for it, an
 io interface and a control interface to some alma process.
<p>
  <dd><dl>
    <dt> <b>Overrides:</b>
    <dd> <a href="java.applet.Applet.html#init()">init</a> in class Applet
  </dl></dd>
</dl>
<a name="startAlma()"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="startAlma"><b>startAlma</b></a>
<pre>
 public void startAlma()
</pre>
<dl>
  <dd> This execs the alma according to the almaArgs.
 We cannot exec alma if there is one already running and connected.
<p>
</dl>
<a name="makeControlPanel(java.awt.Panel)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="makeControlPanel"><b>makeControlPanel</b></a>
<pre>
 public void makeControlPanel(Panel almaControl)
</pre>
<dl>
  <dd> The control panel enables the user to control the running of alma.
 <br>
 <img src="execcontrol.gif">
 <br>
 The following controls are provided:
 <ul>
 <li>
 Exec. If alma is not automatically started, clicking this will
 start alma. This will not work if alma is already up.
 <li>
 Step. This causes alma to step once. If alma is automatically stepping,
 the results might be unexepcted.
 <li>
 Run. This causes alma to step continuously with a delay between steps
 as specified by the next control. If alma is run with "run true", this
 might not have the expected results.
 <li>
 Delay. The delay can be specified in milliseconds. Making the delay
 shorter than is possible for the alma executable does no good.
 <li>
 Stop. This stops alma from stepping if that was initiated by the Run
 button. It has no effect on a "run true" alma process.
 Reset. This resets alma. It is effective for both an automatically
 stepping alma process and one controlled from the GUI.
</ul>
<p>
</dl>
<a name="makeIOPanel(java.awt.Panel)"><img src="images/red-ball.gif" width=12 height=12 alt=" o "></a>
<a name="makeIOPanel"><b>makeIOPanel</b></a>
<pre>
 public void makeIOPanel(Panel toAlma)
</pre>
<dl>
  <dd> The IO panel reads and writes to the alma process though stdio.
 <br>
 <img src="io.gif">
 <br>
 There are two windows: one for input and one for output.
 <br>
 The window for input expects the same syntax as one would type at
 the alma keyboard. To send a command to alma, click on "Send".
 <br>
 The output window displays whatever alma outputs to stdout.
<p>
</dl>
</body>
</html>
